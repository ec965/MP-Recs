{"version":3,"sources":["dataTable/userinfo.js","dataTable/tablepagecontrols.js","loading.js","dataTable/tablerow.js","dataTable/tablehead.js","dataTable/index.js","tabs.js","form.js","app.js","index.js"],"names":["UserInformation","props","member","Toolbar","Grid","container","direction","alignContent","item","Link","href","url","target","Typography","variant","name","flashGrade","projectGrade","useStyles","makeStyles","tablePageControl","flexShrink","TablePageControls","classes","count","page","rowsPerPage","onChangePage","className","IconButton","onClick","e","disabled","Math","ceil","max","root","margin","LoadingSpinner","Fragment","CircularProgress","locationList","maxHeight","width","overflow","locationListItem","tableCellData","padding","marginRight","marginLeft","ButtonLinks","locationArr","lat","lon","justify","alignItems","spacing","Button","style","backgroundColor","color","length","DayWeatherInfo","day","xs","src","icon","alt","borderRadius","boxShadow","maxWidth","tempHigh","tempLow","RouteTableRow","align","route","React","useState","open","setOpen","setWeatherError","weather","setWeather","locationArray","location","starURL","slice","TableRow","hover","key","id","TableCell","component","scope","size","fetchString","latitude","longitude","console","log","fetch","then","res","json","data","properties","forecast","dispWeather","periods","isDaytime","temperature","tempHighNote","shortForecast","tempLowNote","i","substring","error","catch","getWeather","imgMedium","imgSqSmall","rating","fontSize","stars","starVotes","toDo","List","dense","map","loc","index","ListItem","ListItemText","primary","paddingBottom","paddingTop","colSpan","Collapse","in","timeout","Box","direciton","tableCellHeading","RouteTableHead","headerRowNames","orderBy","order","onRequestSort","TableHead","children","heading","sortDirection","TableSortLabel","active","property","event","label","marginTop","tableContainer","ascCompare","a","b","getComparator","objSort","array","comparator","sort","RouteTable","recList","handleChangePage","handleChangeRowsPerPage","setOrder","setOrderBy","Paper","TableContainer","Table","TableBody","TableFooter","TablePagination","rowsPerPageOptions","value","labelRowsPerPage","SelectProps","native","onChangeRowsPerPage","ActionsComponent","TabPanel","role","hidden","IconTabs","handleChange","tab0","hideTab0","tab1","hideTab1","AppBar","position","Tabs","onChange","centered","Tab","paddingLeft","paddingRight","note","marginBottom","button","rememberMe","UserFormikField","useField","field","meta","TextField","autoComplete","autoFocus","touched","helperText","UserFormikCheckbox","type","FormControlLabel","control","Checkbox","FormikForm","handleFormSubmit","initialValues","email","localStorage","getItem","apiKey","distance","maxResults","validationSchema","Yup","required","min","positive","integer","onSubmit","UserForm","state","JSON","parse","fetchError","getUser","getTicks","getRoutes","getRoutesForLatLon","getToDos","apiError","currentTab","currentPage","loading","haveResults","bind","handleChangeTab","newValue","this","setState","newPage","window","scrollTo","parseInt","values","setSubmitting","toString","stringify","getName","getClimbs","setItem","clear","response","success","routeList","routeListIndex","tickList","ticks","routeId","gradeArray","Array","fill","routes","includes","gradeStart","indexOf","grade","gradeInt","isNaN","mostGrade","highestGrade","tickListIdSet","Set","add","has","splice","ratingArr","split","swp","join","replace","dataRouteList","toDoSet","toDos","minHeight","PureComponent","theme","createMuiTheme","palette","main","blueGrey","secondary","deepPurple","App","CssBaseline","ThemeProvider","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9abd4f44.chunk.js","sourcesContent":["import React from 'react';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Link from '@material-ui/core/Link';\r\n// import { makeStyles } from '@material-ui/core/styles';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\n// const useStyles=makeStyles({\r\n//   root:{\r\n//     marginTop: 20,\r\n//     // marginBottom: 10,\r\n//     paddingTop: 10,\r\n//     paddingBottom: 10,\r\n//     paddingRight: 16,\r\n//     paddingLeft: 16,\r\n//   },\r\n// });\r\n\r\nexport default function UserInformation(props){\r\n  // let memberDate = new Date(props.memberSince);\r\n  const { member } = props\r\n  // const classes=useStyles();\r\n  \r\n  return(\r\n    <Toolbar>\r\n      <Grid container\r\n        direction=\"column\"\r\n        alignContent=\"flex-start\"\r\n      >\r\n        <Grid item>\r\n          <Link href={member.url} target=\"_blank\">\r\n            <Typography variant=\"h5\">{member.name}</Typography>\r\n          </Link>\r\n        </Grid>\r\n        <Grid item>\r\n          {/* <Typography align=\"center\" variant=\"subtitle2\">Member since: {memberDate.toDateString().substring(3)}</Typography> */}\r\n          {/* <Typography align=\"center\" variant=\"subtitle1\">Rating Recommendation: V{props.flashGrade} - V{props.projectGrade}</Typography> */}\r\n          <Typography variant=\"subtitle1\">(V{props.flashGrade} - V{props.projectGrade})</Typography>\r\n        </Grid>\r\n      </Grid>\r\n    </Toolbar>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n//MUI\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport IconButton from '@material-ui/core/IconButton';\r\n//icons\r\nimport FirstPageIcon from '@material-ui/icons/FirstPage';\r\nimport LastPageIcon from '@material-ui/icons/LastPage';\r\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\r\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';\r\n\r\n\r\nconst useStyles=makeStyles({\r\n  tablePageControl:{\r\n    flexShrink: 0,\r\n  },\r\n});\r\n\r\nexport default function TablePageControls(props){\r\n  const classes=useStyles();\r\n  //this way we can see all props at the top of the component\r\n  const { count, page, rowsPerPage, onChangePage } = props; \r\n  \r\n  function handleFirstPage(e){\r\n    onChangePage(e, 0);\r\n  }\r\n\r\n  function handlePrevPage(e){\r\n    onChangePage(e, page - 1);\r\n  }\r\n\r\n  function handleNextPage(e){\r\n    onChangePage(e, page + 1);\r\n  }\r\n\r\n  function handleLastPage(e){\r\n    onChangePage(e, Math.max(0, Math.ceil(count / rowsPerPage) - 1));\r\n  }\r\n\r\n  return(\r\n    <div className={classes.tablePageControl}>\r\n      <IconButton\r\n        onClick={handleFirstPage}\r\n        disabled={page===0}\r\n      >\r\n        <FirstPageIcon />\r\n      </IconButton>\r\n      <IconButton\r\n        onClick={handlePrevPage}\r\n        disabled={page === 0}\r\n      >\r\n        <KeyboardArrowLeft/>\r\n      </IconButton>\r\n      <IconButton\r\n        onClick={handleNextPage}\r\n        disabled={page >= Math.ceil(count / rowsPerPage) -1}\r\n      >\r\n        <KeyboardArrowRight/>\r\n      </IconButton>\r\n      <IconButton\r\n        onClick={handleLastPage}\r\n        disabled={page >= Math.ceil(count / rowsPerPage) -1}\r\n      >\r\n        <LastPageIcon/>\r\n      </IconButton>\r\n    </div>\r\n  );\r\n}\r\n\r\nTablePageControls.propTypes = {\r\n  count: PropTypes.number.isRequired,\r\n  onChangePage: PropTypes.func.isRequired,\r\n  page: PropTypes.number.isRequired,\r\n  rowsPerPage: PropTypes.number.isRequired,\r\n};\r\n","import React from 'react';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles=makeStyles({\r\n  root:{\r\n    margin: '2em',\r\n  },\r\n});\r\nexport default function LoadingSpinner(props){\r\n  const classes=useStyles();\r\n\r\n  return(\r\n    <React.Fragment>\r\n      <CircularProgress className={classes.root} />\r\n    </React.Fragment>\r\n  );\r\n}\r\n","import React from 'react';\r\n//MUI\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box';\r\nimport Button from '@material-ui/core/Button';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Link from '@material-ui/core/Link';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport Collapse from '@material-ui/core/Collapse';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\n//icons\r\nimport CheckIcon from '@material-ui/icons/Check';\r\nimport ClearIcon from '@material-ui/icons/Clear';\r\nimport StarIcon from '@material-ui/icons/Star';\r\nimport KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown';\r\nimport KeyboardArrowUpIcon from '@material-ui/icons/KeyboardArrowUp';\r\n//css\r\nimport { makeStyles, } from '@material-ui/core/styles';\r\n//my stuff\r\nimport LoadingSpinner from '../loading';\r\n\r\nconst useStyles=makeStyles({\r\n  locationList:{\r\n    maxHeight: 120,\r\n    width: '90%', \r\n    overflow: 'auto',\r\n  },\r\n  locationListItem:{\r\n    // textAlign: \"justify\",\r\n  },\r\n  tableCellData:{\r\n    // border: \"groove\",\r\n    padding: 10,\r\n    marginRight: 6,\r\n    marginLeft: 6,\r\n  },\r\n});\r\n\r\nfunction ButtonLinks(props){\r\n  const { name, locationArr, lat, lon  } = props;\r\n  return(\r\n    \r\n    <Grid container item\r\n      direction=\"row\"\r\n      justify=\"center\"\r\n      alignItems=\"center\"\r\n      spacing={3}\r\n    >\r\n      <Grid item>\r\n        <Button \r\n          variant=\"contained\" \r\n          style={{backgroundColor:'#d32f2f', color:'#fff'}} \r\n          href={'https://www.youtube.com/results?search_query='\r\n            + name + '+'\r\n            + locationArr[locationArr.length-1] + '+'\r\n            + locationArr[locationArr.length-2]}\r\n          target=\"_blank\"\r\n        >\r\n          YouTube\r\n        </Button>\r\n      </Grid>\r\n      <Grid item>\r\n        <Button          \r\n          href={'https://vimeo.com/search?q=' + name + '+' + locationArr[locationArr.length-1] + '+' + locationArr[locationArr.length-2]}\r\n          target=\"_blank\" \r\n          variant=\"contained\" style={{backgroundColor:'#19B7EA', color:'#fff'}}\r\n        >\r\n          Vimeo\r\n        </Button>\r\n      </Grid>\r\n      <Grid item>\r\n        <Button \r\n          variant=\"contained\" \r\n          style={{backgroundColor:'#0F9D58', color:'#fff'}}\r\n          href={'https://www.google.com/maps/@'\r\n            + lat + ',' + lon + ',18z'}\r\n          target=\"_blank\"\r\n        >\r\n          Maps\r\n        </Button>\r\n      </Grid>\r\n      <Grid item>\r\n        <Button           \r\n          href={'https://forecast.weather.gov/MapClick.php?lon=' + lon + '&lat=' + lat}\r\n          target=\"_blank\"\r\n          variant=\"contained\" style={{backgroundColor:'#0d47a1', color:'#fff'}}>\r\n          Weather\r\n        </Button>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n\r\nfunction DayWeatherInfo(props){\r\n  const { day } = props;\r\n  return(\r\n    <Grid container \r\n      justify=\"center\"\r\n      alignItems=\"center\"\r\n      direction=\"column\"\r\n      spacing={1}\r\n    >\r\n      <Grid item xs>\r\n        <img src={day.icon} alt='unavailable' style={{borderRadius:'10px',boxShadow:'0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19)',maxWidth:'3em'}}></img>\r\n      </Grid>\r\n      <Grid item xs>\r\n        <Typography variant='caption'>\r\n          {day.name}\r\n        </Typography>\r\n      </Grid>\r\n      <Grid item xs>\r\n        <Typography variant='caption'>\r\n          {day.tempHigh + '/' + day.tempLow + 'F'}\r\n        </Typography>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n\r\n\r\nexport default function RouteTableRow (props){\r\n  const classes=useStyles();\r\n  const { align, route } = props;\r\n  const [open, setOpen] = React.useState(false);\r\n  const [weatherError, setWeatherError] = React.useState(false);\r\n  const [weather , setWeather] = React.useState([]);\r\n  const locationArray = route.location;//.slice(2);\r\n  const starURL = route.url.slice(0,38) + 'stats/' + route.url.slice(38);\r\n\r\n  \r\n  function getWeather(){\r\n    if (weather.length === 0){\r\n      setWeather([1]);\r\n      let fetchString = 'https://api.weather.gov/points/' + route.latitude + ',' + route.longitude;\r\n      console.log('fetching weather based on lat/lon');\r\n      fetch(fetchString)\r\n        .then(res => res.json())\r\n        .then(\r\n          (data) => {\r\n            console.log('fetching weather based on grid');\r\n            fetch(data.properties.forecast)\r\n              .then( res=> res.json())\r\n              .then(\r\n                (data) => {\r\n                  \r\n                  let dispWeather = [];\r\n                  \r\n                  //starting on a day time\r\n                  if(data.properties.periods[0].isDaytime){\r\n                    dispWeather[0] = {\r\n                      name: 'Today',\r\n                      tempHigh: data.properties.periods[0].temperature,\r\n                      tempHighNote: data.properties.periods[0].shortForecast,\r\n                      icon: data.properties.periods[0].icon,\r\n                      tempLow: data.properties.periods[1].temperature,\r\n                      tempLowNote: data.properties.periods[1].shortForecast,\r\n                    };\r\n                    for(let i=2; i<data.properties.periods.length; i+=2){\r\n                      dispWeather[i/2]={\r\n                        name: data.properties.periods[i].name.substring(0,3),\r\n                        tempHigh: data.properties.periods[i].temperature,\r\n                        tempHighNote: data.properties.periods[i].shortForecast,\r\n                        icon: data.properties.periods[i].icon,\r\n                        tempLow: data.properties.periods[i+1].temperature,\r\n                        tempLowNote: data.properties.periods[i+1].shortForecast,\r\n                      };\r\n                    }\r\n                  }\r\n                  //starting on a night time\r\n                  else{\r\n                    dispWeather[0] = {\r\n                      name: 'Tonight',\r\n                      tempHigh: '',\r\n                      tempHighNote: '',\r\n                      icon: data.properties.periods[0].icon,\r\n                      tempLow: data.properties.periods[0].temperature,\r\n                      tempLowNote: data.properties.periods[0].shortForecast,\r\n                    };\r\n                    for(let i=1; i<data.properties.periods.length-1; i+= 2){\r\n                      dispWeather[(i+1)/2]={\r\n                        name: data.properties.periods[i].name.substring(0,3),\r\n                        tempHigh: data.properties.periods[i].temperature,\r\n                        tempHighNote: data.properties.periods[i].shortForecast,\r\n                        icon: data.properties.periods[i].icon,\r\n                        tempLow: data.properties.periods[i+1].temperature,\r\n                        tempLowNote: data.properties.periods[i+1].shortForecast,\r\n                      };\r\n                    }\r\n                  }\r\n                  setWeather(dispWeather);\r\n                },\r\n                (error) => {\r\n                  setWeatherError(true);\r\n                }\r\n              )\r\n              .catch(console.error);\r\n            },\r\n            (error) => {\r\n              setWeatherError(true);\r\n            }\r\n        )\r\n        .catch(console.error);\r\n    }\r\n  }\r\n\r\n\r\n        \r\n  return(\r\n    <React.Fragment>\r\n      <TableRow hover={true} key={route.id}>\r\n        <TableCell component=\"th\" scope=\"row\">\r\n          <IconButton size=\"small\" onClick={()=>{setOpen(!open); getWeather();}}>\r\n            {open ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon/>}\r\n          </IconButton>\r\n        </TableCell>\r\n        <TableCell className={classes.tableCellData} align={align}>\r\n          <Link href={route.imgMedium} target=\"_blank\">\r\n            <img src={route.imgSqSmall} alt=\"Unavailable\" ></img>\r\n          </Link>\r\n        </TableCell>\r\n        <TableCell className={classes.tableCellData} align={align} >\r\n          <Link href={route.url} target=\"_blank\">{route.name}</Link>\r\n        </TableCell>\r\n        <TableCell className={classes.tableCellData} align={align}>{route.rating}</TableCell>\r\n        <TableCell className={classes.tableCellData} align={align}>\r\n          <Link href={starURL} target=\"_blank\">\r\n            <StarIcon style={{fontSize:12}}/>{route.stars} / {route.starVotes}\r\n          </Link>\r\n        </TableCell>\r\n        <TableCell className={classes.tableCellData} align={align}>\r\n          {route.toDo\r\n            ? <CheckIcon/>\r\n            : <ClearIcon/>                   \r\n          }\r\n        </TableCell>\r\n        <TableCell className={classes.tableCellData} align={align}>\r\n          <List className={classes.locationList} dense>\r\n          {locationArray.map((loc,index) => (\r\n            <ListItem key={index}>\r\n              <ListItemText className={classes.locationListItem} primary={loc}/>\r\n            </ListItem>\r\n          ))}\r\n          </List>\r\n        </TableCell>\r\n      </TableRow>\r\n      <TableRow>\r\n        <TableCell style={{ paddingBottom: 0, paddingTop: 0}} colSpan={7}>\r\n          <Collapse in={open} timeout=\"auto\">\r\n            <Box margin={1}>\r\n              <Grid container\r\n                direction=\"column\"\r\n                justify=\"center\"\r\n                alignContent=\"center\"\r\n                spacing={3}\r\n              >\r\n                <Grid item>\r\n                  <ButtonLinks\r\n                    name={route.name}\r\n                    locationArr={route.location}\r\n                    lat={route.latitude}\r\n                    lon={route.longitude}\r\n                  />\r\n                </Grid>\r\n                <Grid item>\r\n                  <Grid container\r\n                    direciton=\"row\"\r\n                    spacing={3}\r\n                  >\r\n                    {weather[0]===1 && <LoadingSpinner/>}\r\n                    {(weather[0]!==1) && (\r\n                      <React.Fragment>\r\n                        {weather.map(( day, index) => (\r\n                          <Grid item key={index}>\r\n                            < DayWeatherInfo day={day}/>\r\n                          </Grid>\r\n                        ))}\r\n                      </React.Fragment>\r\n                    )}\r\n                  </Grid>\r\n                </Grid>\r\n              </Grid>\r\n            </Box>\r\n          </Collapse>\r\n        </TableCell>\r\n      </TableRow>\r\n    </React.Fragment>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport { makeStyles, } from '@material-ui/core/styles';\r\n\r\nconst useStyles=makeStyles({\r\n  tableCellHeading:{\r\n    padding:10,\r\n    marginRight: 6,\r\n    marginLeft: 6,\r\n  },\r\n});\r\n\r\nexport default function RouteTableHead(props){\r\n  const classes=useStyles();\r\n  const { align, headerRowNames, orderBy, order, onRequestSort } = props;\r\n  \r\n  const createSortHandler = (property) => (event) => {\r\n    onRequestSort(event, property);\r\n  };\r\n  \r\n  return(\r\n    <TableHead>\r\n      <TableRow>\r\n        {props.children}\r\n        {headerRowNames.map((heading) => (\r\n          <TableCell \r\n            key={heading.id} \r\n            className={classes.tableCellHeading} \r\n            align={align}\r\n            sortDirection={orderBy === heading.id ? order : false}\r\n          >\r\n            {heading.id!=='image' \r\n              ? \r\n              (<TableSortLabel\r\n                active={orderBy === heading.id}\r\n                direction={orderBy === heading.id ? order : 'asc'}\r\n                onClick={createSortHandler(heading.id)}\r\n              >\r\n                {heading.label}\r\n              </TableSortLabel>)\r\n              :\r\n              (<>{heading.label}</>)\r\n            }\r\n          </TableCell>\r\n        ))}\r\n      </TableRow>\r\n    </TableHead>\r\n  );\r\n}\r\n","import React from 'react';\r\n//MUI\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport TableFooter from '@material-ui/core/TableFooter';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\n//mystuff\r\nimport UserInformation from './userinfo';\r\nimport TablePageControls from './tablepagecontrols';\r\nimport RouteTableRow from './tablerow';\r\nimport RouteTableHead from './tablehead';\r\n//css\r\nimport { makeStyles, } from '@material-ui/core/styles';\r\n\r\nconst useStyles=makeStyles({\r\n  root:{\r\n    marginTop: 20,\r\n    paddingTop:10,\r\n  },\r\n  tableContainer:{\r\n  },\r\n});\r\n\r\n//sorting functions\r\n//compare ascending\r\nfunction ascCompare(a, b, orderBy){\r\n  if( a[orderBy] > b[orderBy] ){\r\n    return 1;\r\n  }\r\n  else if( a[orderBy] < b[orderBy] ){\r\n    return -1;\r\n  }\r\n  return 0;\r\n}\r\n\r\nfunction getComparator(order, orderBy){\r\n  return order === 'asc'\r\n    ? (a,b) => ascCompare(a, b, orderBy)\r\n    : (a,b) => -ascCompare(a, b, orderBy);\r\n}\r\n\r\nfunction objSort( array, comparator ){\r\n  return array.sort(comparator);\r\n}\r\n\r\n\r\n\r\n\r\nexport default function RouteTable(props){\r\n  const { align, recList, page, rowsPerPage, handleChangePage, handleChangeRowsPerPage,\r\n    member, flashGrade, projectGrade\r\n  } = props;\r\n  const classes=useStyles();\r\n  const [order, setOrder] = React.useState('asc');\r\n  const [orderBy, setOrderBy] = React.useState('name');\r\n\r\n  const handleRequestSort = (event, property) =>{\r\n    const isAsc = orderBy === property && order === 'asc';\r\n    setOrder(isAsc ? 'desc' : 'asc');\r\n    setOrderBy(property);\r\n  }\r\n  \r\n  const headerRow = [\r\n    { id: 'image', label: 'Image'}, \r\n    { id: 'name', label: 'Name'}, \r\n    { id: 'rating', label: 'Rating'}, \r\n    { id: 'stars', label: 'Stars / Votes'}, \r\n    { id: 'toDo', label: 'To Do'}, \r\n    { id: 'location', label: 'Location'},\r\n  ];\r\n\r\n  return(\r\n    <Paper className={classes.root}>\r\n      <UserInformation\r\n        member={member}\r\n        flashGrade={flashGrade}\r\n        projectGrade={projectGrade}\r\n      />\r\n      <TableContainer className={classes.tableContainer}>\r\n        <Table size='small' padding='none'>\r\n          <RouteTableHead\r\n            headerRowNames={headerRow}\r\n            align={align}\r\n            order={order}\r\n            orderBy={orderBy}\r\n            onRequestSort={handleRequestSort}\r\n          > \r\n          {/*null cell for the drop down button column*/}\r\n            <TableCell scope=\"row\" component=\"th\" />\r\n          </RouteTableHead>\r\n          <TableBody>\r\n            {(rowsPerPage > 0\r\n              ? objSort(recList, getComparator(order, orderBy)).slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n              : objSort(recList, getComparator(order, orderBy))\r\n            ).map((route) => (\r\n              <RouteTableRow align={align} key={route.id} route={route}/>\r\n            ))}\r\n\r\n          </TableBody>\r\n          <TableFooter>\r\n            <TableRow>\r\n              <TablePagination\r\n                rowsPerPageOptions={[5,10,25, {label: 'All', value: -1}]}\r\n                count={recList.length}\r\n                rowsPerPage={rowsPerPage}\r\n                labelRowsPerPage={'Routes / page'}\r\n                page={page}\r\n                SelectProps={{\r\n                  native:true,\r\n                }}\r\n                onChangePage={handleChangePage}\r\n                onChangeRowsPerPage={handleChangeRowsPerPage}\r\n                ActionsComponent={TablePageControls}\r\n              />\r\n            </TableRow>\r\n          </TableFooter>\r\n        </Table>\r\n      </TableContainer>\r\n    </Paper>\r\n  );\r\n}\r\n\r\n","import React from 'react';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport ListIcon from '@material-ui/icons/List';\r\nimport Box from '@material-ui/core/Box';\r\n\r\nfunction TabPanel(props){\r\n  return(\r\n    <div\r\n      role=\"tabpanel\"\r\n      hidden={props.value !== props.index}\r\n      id={'simple-tabpanel' + props.index}\r\n    >\r\n      {props.value===props.index && (\r\n        <Box>\r\n          {props.children}\r\n        </Box>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default function IconTabs(props){\r\n  const { \r\n    value, \r\n    handleChange, \r\n    tab0, \r\n    hideTab0, \r\n    tab1, \r\n    hideTab1 \r\n  } = props;\r\n  \r\n  return(\r\n    <div>\r\n      <AppBar position=\"sticky\">\r\n        <Tabs\r\n          value={value}\r\n          onChange={handleChange}\r\n          // indicatorColor=\"primary\"\r\n          // textColor=\"primary\"\r\n          centered\r\n        >\r\n          <Tab icon={<SearchIcon/>} label=\"SEARCH\" disabled={hideTab0}/>\r\n          <Tab icon={<ListIcon/>} label=\"CLIMBS\" disabled={hideTab1} />\r\n        </Tabs>\r\n      </AppBar>\r\n      <TabPanel value={value} index={0}>\r\n        {tab0}\r\n      </TabPanel>\r\n      <TabPanel value={value} index={1}>\r\n        {tab1}\r\n      </TabPanel>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Link from '@material-ui/core/Link';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport apiKey from './apiKey.json';\r\n//Formik\r\nimport { Formik, Form, useField } from 'formik';\r\nimport * as Yup from 'yup';\r\n\r\nconst useStyles = makeStyles({\r\n  root:{\r\n    paddingLeft: 20,\r\n    paddingRight: 20,\r\n    paddingTop: 20\r\n  },\r\n  note:{\r\n    marginRight : 10,\r\n    marginBottom: 0,\r\n    paddingBottom:0,\r\n  },\r\n  button:{\r\n    marginTop:12,\r\n  },\r\n  rememberMe:{\r\n    marginTop: 5,\r\n    marginLeft: 5,\r\n    fontSize: 99,\r\n  },\r\n});\r\n\r\n\r\nfunction UserFormikField (props){\r\n  const [field, meta] = useField(props);\r\n\r\n  return(\r\n    <TextField\r\n      variant=\"outlined\"\r\n      margin=\"normal\"\r\n      size=\"small\"\r\n      id={props.id}\r\n      label={props.label}\r\n      name={props.name}\r\n      autoComplete={props.autoComplete}\r\n      autoFocus={props.autoFocus}\r\n\r\n      //error handeling\r\n      error={meta.touched && meta.error}\r\n      helperText={meta.error}\r\n\r\n      {...field}\r\n    />\r\n  );\r\n}\r\n\r\nfunction UserFormikCheckbox(props){\r\n  const classes=useStyles();\r\n  const { name, id, label } = props;\r\n  const [field, meta] = useField({...props, type: 'checkbox'});\r\n    \r\n  return(\r\n    <FormControlLabel \r\n      className={classes.rememberMe}\r\n      control={\r\n        <Checkbox\r\n          id={name}\r\n          name={id}\r\n          color=\"primary\"\r\n          {...field}\r\n        />\r\n      }\r\n      label={label}\r\n    />\r\n  );\r\n}\r\n\r\n\r\nexport default function FormikForm (props){\r\n  const classes=useStyles();\r\n  const {\r\n    handleFormSubmit\r\n  } = props;\r\n  return(\r\n    <Paper className={classes.root}>\r\n      <Formik\r\n      //will try to load values from local storage, or else just init with null values\r\n      //change these values back to null, just api json for testing\r\n        initialValues={{\r\n          email: localStorage.getItem('email') || apiKey.email, \r\n          apiKey: localStorage.getItem('apiKey') || apiKey.key,\r\n          rememberMe: (localStorage.getItem('rememberMe') === 'true') || false,    \r\n          lat: localStorage.getItem('lat') || apiKey.lat,\r\n          lon: localStorage.getItem('lon') || apiKey.lon,\r\n          distance: localStorage.getItem('distance') || apiKey.distance || 69,\r\n          maxResults: localStorage.getItem('maxResults') || 50,\r\n                    \r\n        }}\r\n        validationSchema={Yup.object({\r\n          email: Yup.string()\r\n            .email(\"This isn't an email\")\r\n            .required('Required'),\r\n          apiKey: Yup.string()\r\n            .required('Required'),\r\n          lat: Yup.number()\r\n            .required('Required')\r\n            .min(-90,'Too lateral, enter a higher number')\r\n            .max(90, 'Too lateral, enter a lower number'),\r\n          lon: Yup.number()\r\n            .required('Required')\r\n            .min(-180, 'Too long, enter a higher number')\r\n            .max(180, 'Too long, enter a lower number'),\r\n          distance: Yup.number()\r\n            .required('Required')\r\n            .positive(\"Distance isn't negative\")\r\n            .max(200, 'Choose a shorter distance'),\r\n          maxResults: Yup.number()\r\n            .required('Required')\r\n            .integer()\r\n            .max(500, 'Choose less results'),\r\n          })}\r\n        onSubmit={handleFormSubmit}\r\n      >\r\n      \r\n        <Form autoComplete=\"on\">\r\n          <Grid container \r\n            direction=\"row\" \r\n            justify=\"center\" \r\n            alignItems=\"center\" \r\n            spacing={1}\r\n          >\r\n            <Grid item>\r\n              <UserFormikField\r\n                id=\"email\"\r\n                name=\"email\"\r\n                label=\"Email\"\r\n                autoComplete=\"email\"\r\n                autoFocus={true}\r\n              />\r\n            </Grid>\r\n            <Grid item>\r\n              <UserFormikField\r\n                id=\"apiKey\"\r\n                name=\"apiKey\"\r\n                label=\"API Key\"\r\n              />\r\n            </Grid>\r\n            <Grid item >\r\n              <UserFormikCheckbox\r\n                name=\"rememberMe\"\r\n                id=\"rememberMe\"\r\n                label=\"Remember Me\"\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n          <Grid container \r\n            direction=\"row\" \r\n            justify=\"center\" \r\n            alignItems=\"center\" \r\n            spacing={1}\r\n          >\r\n            <Grid item>\r\n              <UserFormikField\r\n                id=\"lat\"\r\n                name=\"lat\"\r\n                label=\"Latitude\"\r\n              />\r\n            </Grid>\r\n            <Grid item>\r\n              <UserFormikField\r\n                id=\"lon\"\r\n                name=\"lon\"\r\n                label=\"Longitude\"\r\n              />\r\n            </Grid>\r\n            <Grid item>\r\n              <UserFormikField\r\n                id=\"distance\"\r\n                name=\"distance\"\r\n                label=\"Distance (miles)\"\r\n              />\r\n            </Grid>\r\n            <Grid item>\r\n              <UserFormikField\r\n                id=\"maxResults\"\r\n                name=\"maxResults\"\r\n                label=\"Number of Results\"\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n\r\n          <Grid container \r\n            direction=\"row\" \r\n            justify=\"center\" \r\n            alignItems=\"center\" \r\n            spacing={1}\r\n          >\r\n            <Grid item>\r\n              <Button\r\n                className={classes.button}\r\n                type=\"submit\"\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n              >\r\n                Submit\r\n              </Button>\r\n            </Grid>\r\n          </Grid>\r\n        </Form>\r\n      </Formik>\r\n        <Grid container \r\n          direction=\"row\" \r\n          justify=\"flex-end\" \r\n          alignItems=\"flex-end\" \r\n          spacing={1}\r\n        >\r\n          <Grid item className={classes.note}>\r\n            <Typography variant='caption'>\r\n              <Link href='https://www.mountainproject.com/data' target=\"_blank\">\r\n                Find my Mountain Project API key\r\n              </Link>\r\n            </Typography>\r\n          </Grid>\r\n        </Grid>\r\n    </Paper>\r\n\r\n  );\r\n}\r\n","import React from 'react';\r\n//material UI\r\nimport Grid from '@material-ui/core/Grid';\r\n//my stuff\r\nimport RouteTable from './dataTable/index'; \r\nimport IconTabs from './tabs'; \r\nimport FormikForm from './form'; \r\nimport LoadingSpinner from './loading'; \r\n//CSS dependencies\r\n\r\nexport default class UserForm extends React.PureComponent{\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n     \r\n      //form inputs\r\n      email: '',\r\n      apiKey: '',\r\n      rememberMe: null, \r\n      lat: null,\r\n      lon: null,\r\n      distance: null,\r\n      maxResults: null,\r\n\r\n      //things to fetch\r\n      member: JSON.parse(localStorage.getItem('member')) || '', \r\n\r\n      recList: JSON.parse(localStorage.getItem('recList')) || [],\r\n      flashGrade: localStorage.getItem('flashGrade') || 0,\r\n      projectGrade: localStorage.getItem('projectGrade') || 0,\r\n\r\n      //fetch error vars\r\n      fetchError: {\r\n        getUser: null,\r\n        getTicks: null,\r\n        getRoutes: null,\r\n        getRoutesForLatLon: null,\r\n        getToDos: null,\r\n        weather: null,\r\n      },\r\n\r\n      apiError: {\r\n        getUser: null,\r\n        getTicks: null,\r\n        getRoutes: null,\r\n        getRoutesForLatLon: null,\r\n        getToDos:null,\r\n      },\r\n      \r\n      currentTab: 1,  //change this back to zero before release\r\n\r\n      //Results (dataTable.js) state controllers\r\n      currentPage: 0,\r\n      rowsPerPage: 5,\r\n\r\n      //control loading spinner (loading.js)\r\n      loading: false,\r\n      //boolean to enable the results tab\r\n      haveResults: (localStorage.getItem('haveResults')==='true') || false,\r\n    }\r\n\r\n    this.handleFormSubmit = this.handleFormSubmit.bind(this);\r\n    this.handleChangeTab = this.handleChangeTab.bind(this);\r\n    this.handleChangePage = this.handleChangePage.bind(this);\r\n    this.handleChangeRowsPerPage = this.handleChangeRowsPerPage.bind(this);\r\n  }\r\n\r\n  //Tab state controller (tabs.js)\r\n  handleChangeTab(event, newValue){\r\n    this.setState({ currentTab : newValue });\r\n  };\r\n\r\n  //Results (dataTable.js) state controlers\r\n  handleChangePage(e, newPage){\r\n    window.scrollTo(0,0);\r\n    this.setState({currentPage: newPage});\r\n  }\r\n  \r\n  handleChangeRowsPerPage(e){\r\n    this.setState({ \r\n      rowsPerPage : parseInt(e.target.value, 10),\r\n      currentPage: 0, \r\n    });\r\n  }\r\n\r\n  /////------------------------------------------------\r\n  //Form (form.js) state controllers\r\n  handleFormSubmit(values, {setSubmitting }){\r\n    console.log(\"submit button clicked\");\r\n    \r\n    this.setState({\r\n      loading:true\r\n    });\r\n    \r\n    this.setState({\r\n      email: values.email,\r\n      apiKey: values.apiKey,\r\n      rememberMe: values.rememberMe,\r\n      lat: values.lat,\r\n      lon: values.lon,\r\n      distance: values.distance,\r\n      maxResults: values.maxResults\r\n    });\r\n    //}, ()=>console.log('state:',this.state));\r\n    \r\n    console.log('local storage bool', \r\n      (localStorage.getItem('email')!==this.state.email),\r\n      (localStorage.getItem('apiKey')!==this.state.apiKey),\r\n      (localStorage.getItem('rememberMe')!==this.state.rememberMe.toString()),\r\n      (localStorage.getItem('lat')!==this.state.lat),\r\n      (localStorage.getItem('lon')!==this.state.lon),\r\n      (localStorage.getItem('distance')!==this.state.distance),\r\n      (localStorage.getItem('maxResults')!==this.state.maxResults),\r\n      (localStorage.getItem('member')!==JSON.stringify(this.state.member)),\r\n      (localStorage.getItem('flashGrade')!==this.state.flashGrade.toString()),\r\n      (localStorage.getItem('projectGrade')!==this.state.projectGrade.toString())\r\n    )\r\n    //if anything is different in local storage then fetch data again.\r\n    if( \r\n      (localStorage.getItem('email')!==this.state.email)||\r\n      (localStorage.getItem('apiKey')!==this.state.apiKey)||\r\n      (localStorage.getItem('rememberMe')!==this.state.rememberMe.toString())||\r\n      (localStorage.getItem('lat')!==this.state.lat)||\r\n      (localStorage.getItem('lon')!==this.state.lon)||\r\n      (localStorage.getItem('distance')!==this.state.distance)||\r\n      (localStorage.getItem('maxResults')!==this.state.maxResults)||\r\n      (localStorage.getItem('member')!==JSON.stringify(this.state.member))||\r\n      (localStorage.getItem('flashGrade')!==this.state.flashGrade.toString())||\r\n      (localStorage.getItem('projectGrade')!==this.state.projectGrade.toString())\r\n    ){\r\n      this.getName();\r\n      this.getClimbs();\r\n    }\r\n    else{\r\n      //after after all data is loaded, go to the new tab\r\n      //enable tab1 navigation after data is retrieved\r\n      this.setState({ \r\n        currentTab : 1,\r\n        haveResults: true,\r\n        loading: false,\r\n      });\r\n    }\r\n\r\n    //if rememberMe then store everything into local storage\r\n    //these same instructions are called within getName and getClimbs b/c of a-sync\r\n    if( this.state.rememberMe ){\r\n      localStorage.setItem( 'email', this.state.email );\r\n      localStorage.setItem( 'apiKey', this.state.apiKey );\r\n      localStorage.setItem( 'rememberMe', this.state.rememberMe);\r\n      localStorage.setItem( 'lat', this.state.lat);\r\n      localStorage.setItem( 'lon', this.state.lon);\r\n      localStorage.setItem( 'distance', this.state.distance );\r\n      localStorage.setItem( 'maxResults', this.state.maxResults );\r\n      localStorage.setItem( 'haveResults', this.state.haveResults );\r\n    }\r\n    else{\r\n      localStorage.clear();\r\n    }\r\n\r\n    setSubmitting(false);    \r\n  }\r\n  \r\n  \r\n  ////-------------------------------------------------------- \r\n  //API call/ functions\r\n  getName(){\r\n    fetch('https://www.mountainproject.com/data/get-user?email='+ this.state.email +'&key=' + this.state.apiKey)\r\n      .then(response => response.json())\r\n      .then(\r\n        (data) => {\r\n          if(data.success === 1){\r\n            //console.log(data);\r\n            this.setState({\r\n              member: data\r\n            });\r\n\r\n            if( this.state.rememberMe ){\r\n              localStorage.setItem( 'member', JSON.stringify(this.state.member) );\r\n            }\r\n            else{\r\n              localStorage.clear();\r\n            }\r\n          }\r\n          else{\r\n            this.setState({\r\n              apiError:{\r\n                getUser:true\r\n              }\r\n            });\r\n          }\r\n        },\r\n        (error) => {\r\n          this.setState({\r\n            fetchError: {\r\n              getUser: true\r\n            }\r\n          });\r\n        }\r\n      )\r\n      .catch(console.error);\r\n  }\r\n\r\n  getWeather(routeList, routeListIndex){\r\n    //API documentation: https://www.weather.gov/documentation/services-web-api\r\n    if(routeListIndex > routeList.length-1){\r\n      return;\r\n    }\r\n\r\n    let lat=routeList[routeListIndex].latitude;\r\n    let lon = routeList[routeListIndex].longitude;\r\n\r\n    let fetchString = 'https://api.weather.gov/points/' + lat + ',' + lon;\r\n    \r\n    fetch(fetchString)\r\n      .then(res => res.json())\r\n      .then(\r\n        (data) => {\r\n          fetch(data.properties.forecast)\r\n            .then( res=> res.json())\r\n            .then(\r\n              (data) => {\r\n                routeList[routeListIndex].weather = data.properties.periods;\r\n                console.log(routeListIndex);\r\n                this.getWeather(routeList, routeListIndex+1);\r\n              },\r\n              (error) => {\r\n                this.setState({\r\n                  fetchError: {\r\n                    weather: true\r\n                  }\r\n                });\r\n              }\r\n            )\r\n            .catch(console.error);\r\n          },\r\n          (error) => {\r\n            this.setState({\r\n              fetchError: {\r\n                weather: true\r\n              }\r\n            });\r\n          }\r\n      )\r\n      .catch(console.error);\r\n  }\r\n\r\n              \r\n  getClimbs(){\r\n    //get the users ticks\r\n    console.log(\"getting ticks\");\r\n    fetch('https://www.mountainproject.com/data/get-ticks?email=' + this.state.email + '&key=' + this.state.apiKey)\r\n      .then(res => res.json())\r\n      .then(\r\n        (data) => {\r\n            if (data.success === 1){\r\n              var tickList = data.ticks; //we will need this later to remove boulders the user has already ticked\r\n\r\n              //get the route data from the ticks\r\n              //generate the fetch url\r\n              var fetchString = 'https://www.mountainproject.com/data/get-routes?routeIds=';\r\n              for (let i=0; i<data.ticks.length; i++){\r\n                fetchString += data.ticks[i].routeId + ',';\r\n              }\r\n              //remove extra comma\r\n              fetchString = fetchString.substring(0, fetchString.length - 1);\r\n              fetchString += '&key=' + this.state.apiKey;\r\n              \r\n              console.log(\"getting tick route data\");\r\n              fetch(fetchString)\r\n                .then(res => res.json())\r\n                .then(\r\n                  (data) => {\r\n                    if (data.success === 1) {\r\n                      var gradeArray = new Array(18).fill(0);\r\n                      \r\n                      //generate grade estimations for bouldering\r\n                      for(let i=0; i<data.routes.length; i++){\r\n                        if( data.routes[i].type.includes(\"Boulder\") ){ //some climbs will be listed as both TR (top rope) and boulder for high balls\r\n                          var gradeStart = data.routes[i].rating.indexOf(\"V\",0); //get the index of the [V] in V13\r\n                          var grade = data.routes[i].rating.substring( (gradeStart+1), (gradeStart+3) ); //get the grade [13] in V13\r\n                          var gradeInt = parseInt(grade); //parse the string into an int. for grades < 10, the result from V3 = '3 ' so we parse to remove the space and resolve type errors\r\n\r\n                          //parseInt will parse VB to NaN so we will round that up to V0. I mean those are basically the same grade.\r\n                          if (isNaN(gradeInt)){\r\n                            gradeInt = 0;\r\n                          }\r\n                          \r\n                          gradeArray[gradeInt] += 1;\r\n                        }\r\n                      }\r\n                      //console.log(gradeArray);  \r\n                      \r\n                      //see construction for grade ranges\r\n                      var mostGrade = 0;\r\n                      var highestGrade = 0;\r\n                      for(let i=0; i < gradeArray.length; i++){\r\n                        if(gradeArray[i] > gradeArray[mostGrade]){\r\n                          mostGrade = i;\r\n                        }\r\n                        if(gradeArray[i] !== 0){\r\n                          highestGrade = i;\r\n                        }\r\n                      }\r\n    \r\n                      this.setState({\r\n                        flashGrade: mostGrade,\r\n                        projectGrade: highestGrade+1\r\n                      });\r\n                      \r\n\r\n                      //now that we have a recommended grade range, we can get a list of grades in that range\r\n                      //this will be done using get-routes-for-lat-lon\r\n                      //most variables for this fetch string will be coming from a form\r\n                      fetchString = \"https://www.mountainproject.com/data/get-routes-for-lat-lon?\"\r\n                        + \"lat=\" + this.state.lat + \"&lon=\" + this.state.lon\r\n                        + \"&maxDistance=\" + this.state.distance\r\n                        + \"&maxResults=\" + this.state.maxResults //perhaps give an option to return more boulders later\r\n                        + \"&minDiff=V\" + (this.state.flashGrade)\r\n                        + \"&maxDiff=V\" + (this.state.projectGrade)\r\n                        + \"&key=\" + this.state.apiKey;\r\n                      \r\n                      console.log(\"getting routes from lat lon\");\r\n                      //get-routes-for-lat-lon returns only the highest rated climbs\r\n                      fetch(fetchString)\r\n                        .then(res => res.json())\r\n                        .then(\r\n                          (data) => {\r\n                            if (data.success === 1){\r\n                              \r\n                              let tickListIdSet = new Set();\r\n                              for(let i=0; i<tickList.length; i++){\r\n                                tickListIdSet.add(tickList[i].routeId);\r\n                              }\r\n                              console.log(tickListIdSet);\r\n                            \r\n                              //we don't need to remove non-boulder problems because routes-for-lat-lon can sort by boulders using minDiff & maxDiff\r\n                              for(let i=data.routes.length-1; i>=0; i--){\r\n                                //remove climbs that were already ticked\r\n                                if( tickListIdSet.has( data.routes[i].id) ){\r\n                                  data.routes.splice(i,1);\r\n                                }\r\n                                \r\n                                // swap the V grade and YDS grade position\r\n                                else if( data.routes[i].rating.includes(\"5.\") ){\r\n                                   let ratingArr = data.routes[i].rating.split(\" \");\r\n                                   if( ratingArr.length >= 1 ){\r\n                                     let swp = ratingArr[0];\r\n                                     ratingArr[0] = ratingArr[1];\r\n                                     ratingArr[1] = swp;\r\n                                   }\r\n                                   data.routes[i].rating = ratingArr.join().replace(/,/g, ' ');\r\n                                }\r\n                              }\r\n\r\n                              \r\n                              var dataRouteList = data.routes;\r\n                              //we still need to cross references this list with the to-do list so that the user can be notified if a climb is on their to-do list                              \r\n                              fetch('https://www.mountainproject.com/data/get-to-dos?email=' + this.state.email + '&key=' + this.state.apiKey)\r\n                                .then(res=>res.json())\r\n                                .then(\r\n                                  (data) => {\r\n                                    if (data.success === 1){\r\n                                      \r\n                                      //put the toDo list into a set for faster checking\r\n                                      let toDoSet = new Set();\r\n                                      for(let i=0; i<data.toDos.length; i++){\r\n                                        toDoSet.add(data.toDos[i]);\r\n                                      }\r\n\r\n                                      //add a new var to the object that denotes if it is or is not on the user's todo list\r\n                                      for(let i=0; i<dataRouteList.length; i++ ){\r\n                                        if( toDoSet.has( dataRouteList[i].id ) ){\r\n                                          dataRouteList[i].toDo = true;\r\n                                        }\r\n                                        else{\r\n                                          dataRouteList[i].toDo = false;\r\n                                        }\r\n\r\n                                      }\r\n                                      \r\n\r\n                                      //this is the final array we need!\r\n                                      this.setState({recList:dataRouteList});\r\n                                      console.log(this.state.recList);\r\n                                      if( this.state.rememberMe ){\r\n                                        localStorage.setItem( 'recList', JSON.stringify(this.state.recList) );\r\n                                        localStorage.setItem( 'flashGrade', this.state.flashGrade );\r\n                                        localStorage.setItem( 'projectGrade', this.state.projectGrade );\r\n                                      }\r\n                                      else{\r\n                                        localStorage.clear();\r\n                                      }\r\n\r\n\r\n////---------------------------------->\r\n                                      //after after all data is loaded, go to the new tab\r\n                                      //enable tab1 navigation after data is retrieved\r\n                                      this.setState({ \r\n                                        currentTab : 1,\r\n                                        haveResults: true,\r\n                                        loading: false,\r\n                                      });\r\n                                  }\r\n                                  else{\r\n                                    this.setState({\r\n                                      apiError:{\r\n                                        getToDos:true\r\n                                      }\r\n                                    });\r\n                                    console.error(this.state.apiError);\r\n                                  }\r\n                                },\r\n                                (error)=> {\r\n                                  this.setState({\r\n                                    fetchError:{\r\n                                      getToDos:true\r\n                                    }\r\n                                  });\r\n                                  console.error(this.state.fetchError);\r\n                                }\r\n                              )\r\n                              .catch(console.error);\r\n\r\n                            }\r\n                            else{\r\n                              this.setState({\r\n                                apiError:{\r\n                                  getRoutesForLatLon:true\r\n                                }\r\n                              });\r\n                              console.error(this.state.apiError);\r\n                            }\r\n                          },\r\n                          (error)=> {\r\n                            this.setState({\r\n                              fetchError:{\r\n                                getRoutesForLatLon:true\r\n                              }\r\n                            });\r\n                            console.error(this.state.fetchError);\r\n                          }\r\n                        )\r\n                        .catch(console.error);\r\n                    }\r\n                    \r\n                    else {\r\n                      this.setState({\r\n                        apiError:{\r\n                          getRoutes: true\r\n                        }\r\n                      });\r\n                      console.error(this.state.apiError);\r\n                    }\r\n                  },\r\n                  (error)=> {\r\n                    this.setState({\r\n                      fetchError:{\r\n                        getRoutes:true\r\n                      }\r\n                    });\r\n                    console.error(this.state.fetchError);\r\n                  }\r\n                )\r\n                .catch(console.error);\r\n            }\r\n            \r\n            else{\r\n              this.setState({\r\n                apiError:{\r\n                  getTicks: true\r\n                }\r\n              });\r\n              console.error(this.state.apiError);\r\n            }    \r\n        },\r\n        (error) => {\r\n          this.setState({\r\n            fetchError:{\r\n              getTicks:true\r\n            }\r\n          });\r\n          console.error(this.state.fetchError);\r\n        }\r\n      )\r\n      .catch(console.error);\r\n  }\r\n\r\n\r\n  render(){\r\n    return(\r\n      <div>\r\n        <IconTabs\r\n          value={this.state.currentTab}\r\n          handleChange={this.handleChangeTab}\r\n          hideTab0={false}\r\n          tab0={\r\n            <Grid\r\n              container\r\n              spacing={0}\r\n              direction=\"column\"\r\n              alignItems=\"center\"\r\n              justify=\"center\"\r\n              style={{ minHeight: '60vh' }}\r\n            >\r\n              <Grid item>\r\n                <FormikForm\r\n                  handleFormSubmit={this.handleFormSubmit}\r\n                />\r\n              </Grid>\r\n              <Grid item>\r\n                {this.state.loading && <LoadingSpinner/>}\r\n              </Grid>\r\n            </Grid>\r\n          }\r\n          \r\n          //tab1 will be disabled until a search is put in\r\n          //show results=false; hideTab=true\r\n          hideTab1={!this.state.haveResults}          \r\n          tab1={ \r\n            <div>\r\n              <Grid\r\n                container\r\n                spacing={3}\r\n                direction=\"column\"\r\n                alignItems=\"center\"\r\n                justify=\"center\"\r\n              >\r\n                <Grid item>\r\n                  <RouteTable\r\n                    member={this.state.member}\r\n\r\n                    projectGrade={this.state.projectGrade}\r\n                    flashGrade={this.state.flashGrade}\r\n                    \r\n                    align=\"justify\"\r\n                    recList={this.state.recList}\r\n                    page={this.state.currentPage}\r\n                    handleChangePage={this.handleChangePage}\r\n                    rowsPerPage={this.state.rowsPerPage}\r\n                    handleChangeRowsPerPage={this.handleChangeRowsPerPage}\r\n                  />\r\n                </Grid>\r\n              </Grid>\r\n            </div>\r\n          }\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n        \r\n    \r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport UserForm from './app'; \r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\r\nimport blueGrey from '@material-ui/core/colors/blueGrey';\r\nimport deepPurple from '@material-ui/core/colors/deepPurple';\r\n\r\nconst theme = createMuiTheme({\r\n  palette:{\r\n    primary: {\r\n      main: blueGrey[700],\r\n    },\r\n    secondary: {\r\n      main: deepPurple[400],\r\n    },\r\n  },\r\n});\r\n\r\n\r\n\r\n\r\n\r\nclass App extends React.Component{\r\n  render(){\r\n    return(\r\n      <React.Fragment>\r\n        <CssBaseline/>\r\n          <ThemeProvider theme={theme}>\r\n            <UserForm/>\r\n          </ThemeProvider>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nReactDOM.render(<App/>, document.getElementById('root'));\r\n"],"sourceRoot":""}